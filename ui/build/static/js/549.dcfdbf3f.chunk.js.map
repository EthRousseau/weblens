{"version":3,"file":"static/js/549.dcfdbf3f.chunk.js","mappings":"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","sources":["Pages/Gallery/MediaDisplay.tsx","api/GalleryApi.ts","Pages/Gallery/GalleryLogic.ts","Pages/Gallery/Gallery.tsx","api/Upload.ts","api/Websocket.ts","components/Crumbs.tsx","components/HeaderBar.tsx","components/PhotoContainer.tsx","components/Presentation.tsx"],"sourcesContent":["import { memo, useEffect, useMemo, useRef, useState } from 'react'\n\nimport Box from '@mui/material/Box'\nimport Grid from '@mui/material/Grid'\n\nimport RawOnIcon from '@mui/icons-material/RawOn'\nimport ImageIcon from '@mui/icons-material/Image'\nimport TheatersIcon from '@mui/icons-material/Theaters'\nimport Crumbs, { StyledBreadcrumb } from '../../components/Crumbs'\nimport styled from '@emotion/styled'\n\nimport { MediaWrapperProps, GalleryBucketProps } from '../../types/GalleryTypes'\nimport { MediaImage } from '../../components/PhotoContainer'\nimport { Tooltip } from '@mui/material'\nimport { MediaData } from '../../types/Generic'\n\n// STYLES //\n\nconst Gallery = styled(Box)({\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    minHeight: \"250px\",\n    position: \"relative\",\n})\n\nconst BlankCard = styled(\"div\")({\n    height: '250px',\n    flexGrow: 999999\n})\n\nconst PreviewCardContainer = styled(Box)({\n    height: \"250px\",\n    borderRadius: \"2px\",\n    flexGrow: 1,\n    flexBasis: 0,\n    margin: 2,\n    position: \"relative\",\n    overflow: \"hidden\",\n    cursor: \"pointer\"\n})\n\nconst PreviewCardImg = styled(MediaImage)({\n    height: \"250px\",\n    minWidth: \"100%\",\n    position: \"absolute\",\n    objectFit: \"cover\",\n\n    transitionDuration: \"300ms\",\n    transform: \"scale3d(1.00, 1.00, 1)\",\n    \"&:hover\": {\n        transitionDuration: \"200ms\",\n        transform: \"scale3d(1.03, 1.03, 1)\",\n    }\n})\n\nconst RecentlyViewedDisplay = styled(Box)({\n    position: \"absolute\",\n    height: \"100%\",\n    width: \"100%\",\n    outlineWidth: \"5px\",\n    outlineStyle: \"solid\",\n    outlineOffset: \"-5px\",\n    outlineColor: \"rgb(78 0 179 / 50%)\",\n    zIndex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\"\n})\n\nconst StyledIconBox = styled(Box)({\n    position: \"absolute\",\n    top: 10,\n    left: 10,\n})\n\n// Functions\n\nfunction handleCopy(setCopied) {\n    setCopied(true)\n    setTimeout(() => setCopied(false), 1000)\n}\n\n// COMPONENTS //\n\nconst MediaInfoDisplay = ({ mediaData }) => {\n    const [copied, setCopied] = useState(false)\n\n    const TypeIcon = () => {\n        if (mediaData.MediaType.IsRaw) {\n            return (\n                <StyledIconBox>\n                    <RawOnIcon sx={{ bgcolor: \"rgb(255, 255, 255, 0.40)\", borderRadius: \"3px\" }} />\n                </StyledIconBox>\n            )\n        } else if (mediaData.MediaType.IsVideo) {\n            return (\n                <StyledIconBox>\n                    <TheatersIcon sx={{ bgcolor: \"rgb(255, 255, 255, 0.40)\", borderRadius: \"3px\" }} />\n                </StyledIconBox>\n            )\n        } else {\n            return (\n                <StyledIconBox>\n                    <ImageIcon sx={{ bgcolor: \"rgb(255, 255, 255, 0.40)\", borderRadius: \"3px\" }} />\n                </StyledIconBox>\n            )\n        }\n    }\n\n    const filename = mediaData.Filepath.substring(mediaData.Filepath.lastIndexOf('/') + 1)\n\n    return (\n        <Box width={\"100%\"} height={\"100%\"}>\n            <TypeIcon />\n            <Box width={\"95%\"} height={\"max-content\"} bottom={10} left={10} position={\"absolute\"}>\n                <StyledBreadcrumb label={copied ? \"Copied\" : filename} success={copied} onClick={e => { e.stopPropagation(); navigator.clipboard.writeText(filename); handleCopy(setCopied) }} />\n\n                {/* <Crumbs path={mediaData.Filepath} includeHome={false} navigate={() => { }} /> */}\n                {/* <Typography position={\"absolute\"} top={4} left={50}>{mediaData.Filepath}</Typography> */}\n            </Box>\n        </Box>\n    )\n}\n\nconst MediaWrapper = memo(function MediaWrapper({ mediaData, showIcons, dispatch }: MediaWrapperProps) {\n    let ref = useRef()\n    mediaData.ImgRef = ref\n\n    let height = 250\n    let width = mediaData.ThumbWidth * (height / mediaData.ThumbHeight)\n\n    return (\n        <PreviewCardContainer\n            ref={ref}\n            minWidth={`clamp(100px, ${width}px, 100% - 8px)`}\n            maxWidth={`${width * 1.5}px`}\n            onClick={() => dispatch({ type: 'set_presentation', presentingHash: mediaData.FileHash })}\n        >\n            <PreviewCardImg\n                mediaData={mediaData}\n                quality={\"thumbnail\"}\n                lazy={true}\n            />\n            {showIcons && (\n                <MediaInfoDisplay mediaData={mediaData} />\n            )}\n\n        </PreviewCardContainer>\n    )\n}, (prev: MediaWrapperProps, next: MediaWrapperProps) => {\n    return (prev.mediaData.FileHash == next.mediaData.FileHash) && (prev.showIcons == next.showIcons)\n})\nconst BucketCards = ({ medias, showIcons, dispatch }) => {\n    const mediaCards = useMemo(() => {\n        return medias.map((mediaData: MediaData) => {\n            if (!mediaData.Display == true) {\n                return null\n            }\n            return (\n                <MediaWrapper\n                    key={mediaData.FileHash}\n                    mediaData={mediaData}\n                    showIcons={showIcons}\n                    dispatch={dispatch}\n                />\n            )\n        }\n        )\n    }, [[...medias], showIcons])\n\n    return (\n        <Gallery>\n            {mediaCards}\n            <BlankCard />\n        </Gallery>\n    )\n}\n\nconst DateWrapper = ({ dateTime }) => {\n    const dateObj = new Date(dateTime)\n    const dateString = dateObj.toUTCString().split(\" 00:00:00 GMT\")[0]\n\n    return (\n        <Box\n            key={`${dateString} title`}\n            component=\"h3\"\n            fontSize={25}\n            pl={1}\n            fontFamily={\"Roboto,RobotoDraft,Helvetica,Arial,sans-serif\"}\n            marginBottom={1}\n        >\n            {dateString}\n        </Box>\n    )\n}\n\n//export const GalleryBucket = memo(function GalleryBucket({\nexport const GalleryBucket = ({\n    date,\n    bucketData,\n    showIcons,\n    dispatch\n}: GalleryBucketProps) => {\n    const anyDisplayed = () => {\n        for (const val of bucketData) {\n            if (val.Display) {\n                return true\n            }\n        }\n        return false\n    }\n\n    if (!anyDisplayed()) {\n        return null\n    }\n\n    return (\n        <Grid item >\n            <DateWrapper dateTime={date} />\n            <BucketCards medias={bucketData} showIcons={showIcons} dispatch={dispatch} />\n        </Grid >\n    )\n}\n\n","import { MediaData } from '../types/Generic'\n\nexport async function fetchData(mediaState, dispatch) {\n    try {\n        let mediaMap = { ...mediaState.mediaMap }\n        let dateMap = { ...mediaState.dateMap }\n        let previousLast: string = mediaState.previousLast\n\n        const limit = mediaState.maxMediaCount - mediaState.mediaCount\n        if (limit < 1) {\n            if (limit < 0) {\n                console.error(`maxMediaCount (${mediaState.maxMediaCount}) less than mediaCount ${mediaState.mediaCount}`)\n            }\n            return\n        }\n\n        const url = new URL(`${window.location.origin}/api/media`)\n        url.searchParams.append('limit', limit.toString())\n        url.searchParams.append('skip', mediaState.mediaCount.toString())\n        url.searchParams.append('raw', mediaState.includeRaw.toString())\n        const data = await fetch(url.toString()).then(res => res.json())\n        const media: MediaData[] = data.Media\n\n        let hasMoreMedia: boolean\n        if (data.Media != null) {\n            hasMoreMedia = data.MoreMedia\n            for (const [_, value] of media.entries()) {\n                mediaMap[value.FileHash] = value\n                if (previousLast) {\n                    mediaMap[value.FileHash].previous = mediaMap[previousLast]\n\n                    mediaMap[previousLast].next = mediaMap[value.FileHash]\n                }\n                previousLast = value.FileHash\n                const [date, _] = value.CreateDate.split(\"T\")\n                if (dateMap[date] == null) {\n                    dateMap[date] = [value]\n                } else {\n                    dateMap[date].push(value)\n                }\n            }\n        } else {\n            hasMoreMedia = false\n        }\n\n        dispatch({\n            type: 'add_media',\n            mediaMap: mediaMap,\n            dateMap: dateMap,\n            hasMoreMedia: hasMoreMedia,\n            previousLast: previousLast,\n            addedCount: media?.length || 0\n        })\n\n    } catch (error) {\n        console.error(error)\n        throw new Error(\"Error fetching data - Ethan you wrote this, its not a js err\")\n    }\n}","import excludeVariablesFromRoot from '@mui/material/styles/excludeVariablesFromRoot'\nimport { fetchData } from '../../api/GalleryApi'\nimport { MediaData } from '../../types/Generic'\n\nexport function mediaReducer(state, action) {\n    switch (action.type) {\n        case 'add_media': {\n            return {\n                ...state,\n                mediaMap: action.mediaMap,\n                dateMap: action.dateMap,\n                hasMoreMedia: action.hasMoreMedia,\n                previousLast: action.previousLast,\n                mediaCount: state.mediaCount + action.addedCount\n            }\n        }\n        case 'insert_thumbnail': {\n            state.mediaMap[action.hash].Thumbnail64 = action.thumb64\n            return {\n                ...state,\n            }\n        }\n        case 'set_scan_progress': {\n            return {\n                ...state,\n                scanProgress: action.progress\n            }\n        }\n        case 'insert_fullres': {\n            state.mediaMap[action.hash].Fullres64 = action.fullres64\n            return {\n                ...state,\n            }\n        }\n        case 'inc_max_media_count': {\n            if (state.loading || state.maxMediaCount > state.mediaCount) {\n                return {\n                    ...state\n                }\n            }\n            return {\n                ...state,\n                maxMediaCount: state.maxMediaCount + action.incBy\n            }\n        }\n        case 'set_loading': {\n            return {\n                ...state,\n                loading: action.loading\n            }\n        }\n        case 'toggle_info': {\n            return {\n                ...state,\n                showIcons: !state.showIcons\n            }\n        }\n        case 'toggle_raw': {\n            window.scrollTo({\n                top: 0,\n                behavior: \"smooth\"\n            })\n            return {\n                ...state,\n                mediaMap: {},\n                dateMap: {},\n                mediaCount: 0,\n                maxMediaCount: 100,\n                previousLast: \"\",\n                includeRaw: !state.includeRaw\n            }\n        }\n        case 'set_search': {\n            return {\n                ...state,\n                searchContent: action.search,\n            }\n        }\n        case 'set_presentation': {\n            console.log(\"Setting: \", action.presentingHash)\n            document.documentElement.style.overflow = \"hidden\"\n\n            return {\n                ...state,\n                presentingHash: action.presentingHash\n            }\n        }\n        case 'presentation_next': {\n            console.log(\"Here1\")\n            let incBy = 0\n            if (!state.mediaMap[state.presentingHash]?.next?.next && state.hasMoreMedia && !(state.loading || state.maxMediaCount > state.mediaCount)) {\n                incBy = 100\n            }\n            return {\n                ...state,\n                maxMediaCount: state.maxMediaCount + incBy,\n                presentingHash: state.mediaMap[state.presentingHash]?.next ? state.mediaMap[state.presentingHash].next.FileHash : state.presentingHash\n            }\n        }\n        case 'presentation_previous': {\n            return {\n                ...state,\n                presentingHash: state.mediaMap[state.presentingHash].previous ? state.mediaMap[state.presentingHash].previous.FileHash : state.presentingHash\n            }\n        }\n        case 'stop_presenting': {\n            if (state.presentingHash == \"\") {\n                return {\n                    ...state\n                }\n            }\n            document.documentElement.style.overflow = \"visible\"\n            try {\n                state.mediaMap[state.presentingHash].ImgRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' })\n            } catch {\n                console.log(\"No img ref: \", state.presentingHash)\n            }\n            return {\n                ...state,\n                presentingHash: \"\"\n            }\n        }\n        default: {\n            console.error(\"Do not have handler for dispatch type\", action.type)\n        }\n    }\n}\n\nexport function startKeybaordListener(dispatch) {\n\n    const keyDownHandler = event => {\n        if (event.key === 'i') {\n            event.preventDefault()\n            dispatch({\n                type: 'toggle_info'\n            })\n        }\n    }\n\n    document.addEventListener('keydown', keyDownHandler)\n    return () => {\n        document.removeEventListener('keydown', keyDownHandler)\n    }\n}\n\nexport function handleScroll(dispatch) {\n    if (document.documentElement.scrollHeight - (document.documentElement.scrollTop + window.innerHeight) < 1500) {\n        dispatch({ type: \"inc_max_media_count\", incBy: 100 })\n    }\n}\n\nexport function moreData(mediaState, dispatch) {\n    if (mediaState.loading) {\n        return\n    }\n\n    dispatch({ type: \"set_loading\", loading: true })\n    fetchData(mediaState, dispatch).then(() => dispatch({ type: \"set_loading\", loading: false }))\n\n}","import { useEffect, useReducer, useMemo, memo, useRef, useState } from 'react'\n\nimport HeaderBar from \"../../components/HeaderBar\"\nimport Presentation from '../../components/Presentation'\nimport GetWebsocket from '../../api/Websocket'\nimport { GalleryBucket } from './MediaDisplay'\nimport { mediaReducer, startKeybaordListener, handleScroll, moreData } from './GalleryLogic'\n\nimport Container from '@mui/material/Container'\nimport Button from '@mui/material/Button'\nimport Box from '@mui/material/Box'\nimport AppBar from '@mui/material/AppBar'\nimport Toolbar from '@mui/material/Toolbar'\nimport { LinearProgress } from '@mui/material'\nimport ToggleButton from '@mui/material/ToggleButton'\nimport RawOnIcon from '@mui/icons-material/RawOn'\nimport InfoIcon from '@mui/icons-material/Info'\nimport { useSnackbar } from 'notistack';\nimport Tooltip from '@mui/material/Tooltip';\nimport styled from '@emotion/styled'\nimport { MediaData } from '../../types/Generic'\n\nconst NoMediaContainer = styled(Box)({\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    flexDirection: \"column\",\n    marginTop: \"50px\",\n    gap: \"25px\",\n    alignContent: \"center\"\n})\n\nconst NoMediaDisplay = () => {\n    return (\n        <NoMediaContainer>\n            No media to display\n            <Button >\n                Upload Media\n            </Button>\n        </NoMediaContainer>\n    )\n}\n\nconst GalleryOptions = ({ rawSelected, showIcons, dispatch }) => {\n\n    return (\n        <AppBar\n            position=\"sticky\"\n            color='transparent'\n            sx={{\n                width: 'fit-content',\n                height: 'fit-content',\n                padding: \"25px\",\n                boxShadow: 0,\n                zIndex: 2\n            }}\n        >\n            <Toolbar style={{ padding: 0, flexDirection: 'column' }}>\n                <Tooltip title={\"Toggle RAW Images\"} placement={\"right\"}>\n                    <ToggleButton value=\"RAW\" selected={rawSelected} onChange={() => { dispatch({ type: 'toggle_raw' }) }} style={{ backgroundColor: \"white\" }}>\n                        <RawOnIcon />\n                    </ToggleButton>\n                </Tooltip>\n                <Tooltip title={\"Toggle Media Info\"} placement={\"right\"}>\n\n                    <ToggleButton value=\"INFO\" selected={showIcons} onChange={() => { dispatch({ type: 'toggle_info' }) }} style={{ backgroundColor: \"white\" }}>\n                        <InfoIcon />\n                    </ToggleButton>\n                </Tooltip>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nconst InfiniteScroll = ({ items, itemCount, loading, moreItems }: { items: any, itemCount: number, loading: boolean, moreItems: boolean }) => {\n    return (\n        <Box flexDirection={\"column\"} pb={10} width={\"90vw\"}>\n            {items}\n            {itemCount == 0 && !loading && (\n                <NoMediaDisplay />\n            )}\n            {!moreItems && (\n                <p style={{ textAlign: \"center\", paddingTop: \"90px\" }}>Wow, you scrolled this whole way?</p>\n            )}\n        </Box>\n    )\n}\n\nconst Gallery = () => {\n    const { enqueueSnackbar } = useSnackbar()\n    const { wsSend, lastMessage, readyState } = GetWebsocket(enqueueSnackbar)\n\n    const [mediaState, dispatch] = useReducer(mediaReducer, {\n        mediaMap: {},\n        mediaCount: 0,\n        maxMediaCount: 100,\n        hasMoreMedia: true,\n        presentingHash: \"\",\n        previousLast: \"\",\n        includeRaw: false,\n        showIcons: false,\n        loading: false,\n        scanProgress: 0,\n        searchContent: \"\"\n    })\n\n    useEffect(() => {\n        moreData(mediaState, dispatch)\n    }, [mediaState.maxMediaCount, mediaState.includeRaw])\n\n    useEffect(() => {\n        window.addEventListener('scroll', (_) => { handleScroll(dispatch) }, false)\n        //return startKeybaordListener(dispatch)\n    }, [])\n\n    useEffect(() => {\n        if (lastMessage) {\n            const msgData = JSON.parse(lastMessage.data)\n            switch (msgData[\"type\"]) {\n                case \"new_items\": {\n                    dispatch({ type: \"append_items\", items: msgData[\"content\"] })\n                    return\n                }\n                case \"scan_directory_progress\": {\n                    dispatch({ type: \"set_scan_progress\", progress: ((1 - (msgData[\"remainingTasks\"] / msgData[\"totalTasks\"])) * 100) })\n                    console.log(msgData[\"remainingTasks\"], \"/\", msgData[\"totalTasks\"])\n                    return\n                }\n                case \"finished\": {\n                    dispatch({ type: \"set_loading\", loading: false })\n                    return\n                }\n                case \"refresh\": {\n                    //GetDirectoryData(path, dispatch)\n                    return\n                }\n                case \"error\": {\n                    enqueueSnackbar(msgData[\"error\"], { variant: \"error\" })\n                    return\n                }\n                default: {\n                    console.error(\"Got unexpected websocket message: \", msgData)\n                    return\n                }\n            }\n        }\n    }, [lastMessage])\n\n    const dateMap = useMemo(() => {\n        let dateMap = {}\n\n        for (let value of Object.values<MediaData>(mediaState.mediaMap)) {\n\n            const [date, _] = value.CreateDate.split(\"T\")\n            if (dateMap[date] == null) {\n                dateMap[date] = [value]\n            } else {\n                dateMap[date].push(value)\n            }\n        }\n\n        return dateMap\n    }, [mediaState.mediaMap])\n\n    const c = useMemo(() => {\n        handleScroll(dispatch)\n        for (let value of Object.values<MediaData>(mediaState.mediaMap)) {\n            var count = 0\n            if (!value.Filepath.includes(mediaState.searchContent)) {\n                value.Display = false\n            } else {\n                count += 1\n                value.Display = true\n            }\n        }\n        return count\n    }, [dateMap, mediaState.searchContent])\n\n    const dateGroups = useMemo(() => {\n        if (!dateMap) {\n            return []\n        }\n        const buckets = Object.keys(dateMap).map((value, i) => (\n            <GalleryBucket key={value} date={value} bucketData={dateMap[value]} showIcons={mediaState.showIcons} dispatch={dispatch} />\n        ))\n        return buckets\n    }, [dateMap, mediaState.showIcons, mediaState.searchContent, c])\n\n    return (\n        <Box>\n            <HeaderBar dispatch={dispatch} wsSend={wsSend} page={\"gallery\"} />\n            {mediaState.loading && (\n                <Box sx={{ width: '100%' }}>\n                    {mediaState.scanProgress == 0 && (\n                        <LinearProgress />\n                    )}\n                    {mediaState.scanProgress != 0 && (\n                        <Box sx={{ width: '100%' }}>\n                            <LinearProgress variant=\"determinate\" value={mediaState.scanProgress} />\n                            <p style={{ position: \"absolute\", left: \"6vw\" }}>Syncing filesystem with database...</p>\n                        </Box>\n                    )}\n                </Box>\n            )}\n            <Container maxWidth={false} style={{ display: 'flex', flexDirection: 'row', justifyContent: \"center\", paddingLeft: \"0px\", paddingTop: \"25px\", paddingRight: mediaState.presentingHash == \"\" ? \"55px\" : \"71px\" }}>\n                {mediaState.presentingHash != \"\" && (\n                    <Presentation mediaData={mediaState.mediaMap[mediaState.presentingHash]} dispatch={dispatch} />\n                )}\n\n                <GalleryOptions rawSelected={mediaState.includeRaw} showIcons={mediaState.showIcons} dispatch={dispatch} />\n                <InfiniteScroll items={dateGroups} itemCount={mediaState.mediaCount} loading={mediaState.loading} moreItems={mediaState.hasMoreMedia} />\n            </Container>\n        </Box>\n    )\n}\n\nexport default Gallery\n","\n\nconst PostFiles = (files, path, wsSend) => {\n    for (let file of files) {\n        PostFile(file, path, wsSend)\n    }\n}\n\nconst PostFile = (file, path, wsSend) => {\n    console.log(\"Inside!\")\n    let msg = JSON.stringify({\n        type: 'file_upload',\n        content: {\n            path: path,\n            file: file\n        },\n    })\n    wsSend(msg)\n}\n\nfunction readFile(file) {\n    return new Promise(function (resolve, reject) {\n        let fr = new FileReader();\n\n        fr.onload = function () {\n            console.log(\"HERE\");\n            resolve({ name: file.name, item64: fr.result });\n        };\n\n        fr.onerror = function () {\n            reject(fr);\n        };\n\n        fr.readAsDataURL(file);\n    });\n}\n\nconst HandleFileUpload = (filesData, path, wsSend) => {\n    let readers = []\n\n    for (let file of filesData) {\n        if (file.size > 2000000000)\n            console.log(\"This upload is going to fail\")\n        readFile(file).then(value => PostFile(value, path, wsSend))\n    }\n\n    //Promise.all(readers).then((values) => { console.log(values); PostFiles(values, path, wsSend) })\n\n}\n\nexport default HandleFileUpload","import { useEffect, useState } from 'react'\nimport useWebSocket from 'react-use-websocket'\nimport { EnqueueSnackbar, closeSnackbar } from 'notistack';\n\nexport default function GetWebsocket(snacky: EnqueueSnackbar) {\n    const WS_URL = `ws://${window.location.host}/api/ws`;\n    const [dcTimeout, setDcTimeout] = useState(null)\n    const [dcSnack, setDcSnack] = useState(null)\n\n    const { sendMessage, lastMessage, readyState } = useWebSocket(WS_URL, {\n        onOpen: () => {\n            clearTimeout(dcTimeout)\n            if (dcSnack) {\n                closeSnackbar(dcSnack)\n                snacky(\"Websocket reconnected\", { variant: \"success\" })\n                setDcSnack(null)\n            }\n            console.log('WebSocket connection established.')\n        },\n        onClose: () => {\n            if (!dcSnack && !dcTimeout) {\n                setDcTimeout(setTimeout(() => {\n                    setDcSnack(snacky(\"No connection to websocket, retrying...\", { variant: \"error\", persist: true, preventDuplicate: true }))\n                }, 2000))\n            }\n        },\n        reconnectAttempts: 25,\n        reconnectInterval: (last) => { return (last ^ 2) * 1000 },\n        shouldReconnect: () => true,\n        onReconnectStop: () => {\n            clearTimeout(dcTimeout)\n            closeSnackbar(dcSnack)\n            setDcSnack(snacky(\"Unable to connect websocket. Please refresh your page\", { variant: \"error\", persist: true, preventDuplicate: true }))\n        }\n    })\n    let wsSend = (msg: string) => { sendMessage(msg) }\n    return {\n        wsSend, lastMessage, readyState\n    }\n}\n\nexport function dispatchSync(path, wsSend, recursive) {\n    console.log(\"Doing sync\")\n    wsSend(JSON.stringify({\n        type: 'scan_directory',\n        content: {\n            path: path,\n            recursive: recursive\n        },\n    }))\n}","import Chip from '@mui/material/Chip'\nimport { createTheme, emphasize, styled } from '@mui/material/styles'\nimport Breadcrumbs from '@mui/material/Breadcrumbs'\nimport { Box } from '@mui/material'\n\n// export const StyledBreadcrumb = styled(Chip)(({ theme, success }) => {\n//     let backgroundColor\n//     if (success) {\n\n//     }\n//     else {\n//         backgroundColor =\n//             theme.palette.mode === 'light'\n//                 ? theme.palette.grey[100]\n//                 : theme.palette.grey[800]\n//     }\n//     return {\n//         backgroundColor,\n//         height: theme.spacing(3.5),\n//         color: theme.palette.text.primary,\n//         fontWeight: theme.typography.fontWeightRegular,\n//         '&:hover, &:focus': {\n//             backgroundColor: emphasize(backgroundColor, 0.06),\n//         },\n//         '&:active': {\n//             boxShadow: theme.shadows[1],\n//             backgroundColor: emphasize(backgroundColor, 0.12),\n//         },\n//     }\n// }) as typeof Chip\n\nconst customTheme = createTheme({\n    palette: {\n        primary: {\n            main: '#1976d2',\n            contrastText: 'white',\n        }\n    },\n    typography: {\n        fontWeightRegular: \"12px\"\n    },\n\n})\n\n\nexport const StyledBreadcrumb = ({ label, success, onClick }) => {\n    let backgroundColor\n    if (success) {\n        backgroundColor = \"rgb(0, 255, 0)\"\n    }\n    else {\n        backgroundColor = \"rgb(230, 230, 230)\"\n    }\n    return (\n        <Box height={\"max-content\"} width={\"100%\"} onClick={onClick} sx={{ cursor: \"pointer\" }}>\n            <Chip label={label} sx={{\n                width: \"100%\",\n                backgroundColor,\n                height: 25,\n                color: \"white\",\n                fontWeight: customTheme.typography.fontWeightRegular,\n                '&:hover, &:focus': {\n                    backgroundColor: emphasize(backgroundColor, 0.10),\n                },\n                '&:active': {\n                    boxShadow: customTheme.shadows[1],\n                    backgroundColor: emphasize(backgroundColor, 0.12),\n                },\n            }}\n            />\n\n        </Box>\n    )\n}\n\nconst Crumbs = ({ path, includeHome, navigate }) => {\n    if (!path) {\n        return (null)\n    }\n    try {\n\n        path = path.slice(1)\n        let parts = path.split('/')\n        while (parts[parts.length - 1] == '') {\n            parts.pop()\n        }\n\n        if (includeHome) {\n            parts.unshift('/')\n        }\n        const current = parts.pop()\n\n        let crumbPaths = []\n        for (let [index, val] of parts.entries()) {\n            if (index == 0 && includeHome) {\n                crumbPaths.push(\"/\")\n                continue\n            } else {\n                crumbPaths.push(crumbPaths[index - 1] + \"/\" + val)\n            }\n        }\n        const crumbs = parts.map((part, i) => (\n            <StyledBreadcrumb key={part} label={part == \"/\" ? \"Home\" : part} success={false} onClick={() => { navigate(`/files/${crumbPaths[i]}`.replace(/\\/\\/+/g, '/')) }} />)\n        )\n        crumbs.push(\n            <StyledBreadcrumb key={current} label={current == \"/\" ? \"Home\" : current} success={false} onClick={() => { }} />\n        )\n        return (\n            <Breadcrumbs separator={\"›\"} >\n                {crumbs}\n            </Breadcrumbs>\n        )\n    }\n    catch (err) {\n        console.log(err)\n        return (null)\n    }\n}\n\nexport default Crumbs","\nimport { memo } from 'react'\n\nimport AppBar from '@mui/material/AppBar'\nimport Toolbar from '@mui/material/Toolbar'\n\nimport IconButton from '@mui/material/IconButton'\nimport UploadIcon from '@mui/icons-material/Upload'\nimport SyncIcon from '@mui/icons-material/Sync'\nimport LogoutIcon from '@mui/icons-material/Logout'\nimport Box from '@mui/material/Box'\nimport FolderIcon from '@mui/icons-material/Folder'\nimport PhotoLibraryIcon from '@mui/icons-material/PhotoLibrary'\nimport Tooltip from '@mui/material/Tooltip'\n\nimport { useNavigate, useParams } from 'react-router-dom'\n\nimport HandleFileUpload from '../api/Upload'\nimport { dispatchSync } from '../api/Websocket'\n\nimport { SendMessage } from 'react-use-websocket'\nimport { TextField, alpha, styled } from '@mui/material'\nimport InputBase from '@mui/material/InputBase'\nimport SearchIcon from '@mui/icons-material/Search'\nimport { useCookies } from 'react-cookie'\n\ntype HeaderBarProps = {\n    dispatch: React.Dispatch<any>\n    wsSend: SendMessage\n    page: string,\n}\n\nconst Search = styled('div')(({ theme }) => ({\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(1),\n        width: 'auto',\n    },\n}));\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: 'inherit',\n    '& .MuiInputBase-input': {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n}));\n\n\n\nconst HeaderBar = memo(function HeaderBar({ dispatch, wsSend, page }: HeaderBarProps) {\n    const [cookies, setCookie, removeCookie] = useCookies(['weblens-login-token']);\n    const nav = useNavigate()\n\n    let path = (useParams()[\"*\"] + \"/\").replace(/\\/\\/+/g, '/')\n    if (page == \"gallery\") {\n        path = \"/\"\n    }\n\n    return (\n        <Box sx={{ flexGrow: 1 }} zIndex={1} pt={1} maxWidth={\"100vw\"}>\n            <AppBar\n                position=\"static\"\n                color='transparent'\n                style={{ boxShadow: \"none\" }}\n            >\n                <Toolbar style={{ paddingLeft: \"25px\" }}>\n                    {page == \"gallery\" && (\n                        <Tooltip title={\"Files\"}>\n                            <IconButton href={\"/files/\"} edge=\"start\" color=\"inherit\" aria-label=\"files\" style={{ margin: 10, flexDirection: \"column\", fontSize: 20 }}>\n                                <FolderIcon />\n                            </IconButton>\n                        </Tooltip>\n                    )}\n                    {page == \"files\" && (\n                        <Tooltip title={\"Gallery\"}>\n                            <IconButton href={\"/\"} edge=\"start\" color=\"inherit\" aria-label=\"files\" style={{ margin: 15, flexDirection: \"column\", fontSize: 20 }}>\n                                <PhotoLibraryIcon />\n                            </IconButton>\n                        </Tooltip>\n                    )}\n                    <Tooltip title={\"Sync\"}>\n                        <IconButton onClick={() => { dispatch({ type: 'set_loading', loading: true }); dispatchSync(path, wsSend, true) }} edge=\"start\" color=\"inherit\" aria-label=\"upload\" style={{ margin: 10, flexDirection: \"column\", fontSize: 20 }}>\n                            <SyncIcon />\n                    </IconButton>\n                    </Tooltip>\n\n                    <Tooltip title={\"Upload\"}>\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"upload\" style={{ margin: 10, flexDirection: \"column\", fontSize: 20 }}>\n                        <input\n                            id=\"upload-image\"\n                            hidden\n                            accept=\"image/*\"\n                            type=\"file\"\n                            onChange={(e) => HandleFileUpload(e.target.files[0], \"/\", null)}\n                            />\n                            <UploadIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Search>\n                        <SearchIconWrapper>\n                            <SearchIcon />\n                        </SearchIconWrapper>\n                        <StyledInputBase\n                            placeholder=\"Search…\"\n                            inputProps={{ 'aria-label': 'search' }}\n                            onChange={e => dispatch({ type: 'set_search', search: e.target.value })}\n                        />\n                    </Search>\n                    <Tooltip title={\"Logout\"} >\n                        <IconButton edge=\"end\" color=\"inherit\" aria-label=\"logout\" style={{ margin: 10, flexDirection: \"column\", fontSize: 20 }} onClick={() => { removeCookie('weblens-login-token'); nav(\"/login\") }}>\n                            <LogoutIcon />\n                        </IconButton>\n                    </Tooltip>\n                </Toolbar>\n            </AppBar>\n        </Box>\n    )\n})\n\nexport default HeaderBar","import { useState, useEffect, useRef, useMemo, ComponentProps } from \"react\";\nimport { Blurhash } from \"react-blurhash\";\nimport ReactPlayer from 'react-player'\n\nimport Box from '@mui/material/Box';\nimport { CircularProgress } from '@mui/material'\nimport styled from \"@emotion/styled\";\n\n// Styles\n\nconst ThumbnailContainer = styled(Box)({\n    top: 0,\n    left: 0,\n    height: \"100%\",\n    width: \"100%\",\n    display: \"flex\",\n    position: \"absolute\",\n    justifyContent: \"center\",\n    overflow: \"hidden\",\n    objectFit: \"contain\"\n})\n\nconst StyledLoader = styled(CircularProgress)({\n    position: \"absolute\",\n    zIndex: 1,\n    bottom: \"10px\",\n    right: \"10px\",\n    color: \"rgb(255, 255, 255)\"\n})\n\n//Components\n\n\nexport function useIsVisible(ref) {\n    const [isIntersecting, setIntersecting] = useState(false);\n\n    useEffect(() => {\n        let options = {\n            rootMargin: \"1000px\"\n        }\n        const observer = new IntersectionObserver(([entry]) => {\n            setIntersecting(entry.isIntersecting)\n        }, options)\n\n        observer.observe(ref.current);\n        return () => {\n            observer.disconnect();\n        };\n    }, [ref]);\n\n    return isIntersecting;\n}\n\n\nexport const MediaImage = ({\n    mediaData,\n    quality,\n    lazy,\n    ...props\n}) => {\n    const [imageLoaded, setImageLoaded] = useState(false)\n    const ref = useRef()\n    const isVisible = useIsVisible(ref)\n\n    const imgUrl = new URL(`${window.location.origin}/api/item/${mediaData.FileHash}`)\n    imgUrl.searchParams.append(quality, \"true\")\n\n    return (\n        <ThumbnailContainer ref={ref} >\n            {!imageLoaded && (\n                <StyledLoader size={20} />\n            )}\n\n            <img\n                height={\"100%\"}\n                width={\"100%\"}\n                loading={lazy ? \"lazy\" : \"eager\"}\n\n                {...props}\n\n                src={imgUrl.toString()}\n                style={{ position: \"absolute\", display: isVisible ? \"block\" : \"none\" }}\n\n                onLoad={() => { setImageLoaded(true) }}\n            />\n            {mediaData.BlurHash && lazy && !imageLoaded && (\n                <Blurhash\n                    style={{ position: \"absolute\" }}\n                    height={250}\n                    width={550}\n                    hash={mediaData.BlurHash}\n                />\n\n            )}\n        </ThumbnailContainer>\n    )\n}","import { useEffect, useRef, useState, useMemo } from 'react'\n\nimport Box from '@mui/material/Box'\nimport IconButton from '@mui/material/IconButton'\nimport CloseIcon from '@mui/icons-material/Close'\nimport styled from '@emotion/styled'\nimport InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile'\nimport Typography from '@mui/material/Typography'\nimport Crumbs from './Crumbs'\n\nimport { MediaData } from '../types/Generic'\nimport { MediaImage } from './PhotoContainer'\n\nconst PresentationContainer = styled(Box)({\n    position: \"fixed\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    color: \"white\",\n    top: 0,\n    left: 0,\n    padding: \"25px\",\n    height: \"calc(100vh - 50px)\",\n    width: \"calc(100vw - 50px)\",\n    zIndex: 3,\n    backgroundColor: \"rgb(0, 0, 0, 0.92)\",\n})\n\nconst StyledMediaImage = styled(MediaImage)({\n    height: \"calc(100% - 40px)\",\n    width: \"calc(100% - 40px)\",\n    objectFit: \"contain\",\n    margin: \"20px\"\n})\n\nconst PresentationVisual = ({ mediaData }) => {\n    if (!mediaData) {\n        return\n    }\n    else if (mediaData.MediaType.IsVideo) {\n        return (\n            <StyledMediaImage key={`${mediaData.FileHash} thumbnail`} mediaData={mediaData} quality={\"thumbnail\"} lazy={false} />\n        )\n    } else if (mediaData.MediaType?.FriendlyName == \"File\") {\n        return (\n            // <Box display={\"flex\"} flexDirection={\"column\"} alignItems={\"center\"}>\n            <InsertDriveFileIcon style={{ width: \"80%\", height: \"80%\" }} onDragOver={() => { }} />\n            // </Box>\n        )\n    } else {\n        return (\n            <div style={{ height: \"100%\", width: \"100%\" }}>\n                <StyledMediaImage key={`${mediaData.FileHash} thumbnail`} mediaData={mediaData} quality={\"thumbnail\"} lazy={false} />\n                <StyledMediaImage key={`${mediaData.FileHash} fullres`} mediaData={mediaData} quality={\"fullres\"} lazy={false} />\n\n            </div>\n        )\n    }\n}\n\nfunction startKeyDownHandler(dispatch) {\n    console.log(\"AHH\")\n    const keyDownHandler = event => {\n        if (event.key === 'Escape') {\n            event.preventDefault()\n            dispatch({ type: 'stop_presenting' })\n        }\n        if (event.key === 'ArrowLeft') {\n            event.preventDefault()\n            dispatch({ type: 'presentation_previous' })\n        }\n        if (event.key === 'ArrowRight') {\n            event.preventDefault()\n            dispatch({ type: 'presentation_next' })\n        }\n    }\n    document.addEventListener('keydown', keyDownHandler)\n    return () => {\n        document.removeEventListener('keydown', keyDownHandler)\n    }\n}\n\nconst Presentation = ({ mediaData, dispatch }: { mediaData: MediaData, dispatch: React.Dispatch<any> }) => {\n    useEffect(() => {\n        return startKeyDownHandler(dispatch)\n    }, [])\n\n    return (\n        <PresentationContainer>\n            <PresentationVisual mediaData={mediaData} />\n\n            <IconButton\n                onClick={() => dispatch({ type: 'stop_presenting' })}\n                color={\"inherit\"}\n                sx={{ display: \"block\", position: \"absolute\", top: 15, left: 15, cursor: \"pointer\", zIndex: 100 }}\n            >\n                <CloseIcon />\n            </IconButton>\n            <Box position={\"absolute\"} top={10}>\n                <Crumbs path={mediaData?.Filepath} includeHome={false} navigate={() => { }} />\n            </Box>\n        </PresentationContainer>\n    )\n}\n\nexport default Presentation"],"names":["Gallery","styled","Box","display","flexWrap","alignItems","minHeight","position","BlankCard","height","flexGrow","PreviewCardContainer","borderRadius","flexBasis","margin","overflow","cursor","PreviewCardImg","MediaImage","minWidth","objectFit","transitionDuration","transform","StyledIconBox","width","outlineWidth","outlineStyle","outlineOffset","outlineColor","zIndex","justifyContent","pointerEvents","top","left","MediaInfoDisplay","_ref","mediaData","_useState","useState","_useState2","_slicedToArray","copied","setCopied","TypeIcon","MediaType","IsRaw","_jsx","children","RawOnIcon","sx","bgcolor","IsVideo","TheatersIcon","ImageIcon","filename","Filepath","substring","lastIndexOf","_jsxs","bottom","StyledBreadcrumb","label","success","onClick","e","stopPropagation","navigator","clipboard","writeText","setTimeout","handleCopy","MediaWrapper","memo","_ref2","showIcons","dispatch","ref","useRef","ImgRef","ThumbWidth","ThumbHeight","concat","maxWidth","type","presentingHash","FileHash","quality","lazy","prev","next","BucketCards","_ref3","medias","mediaCards","useMemo","map","Display","_toConsumableArray","DateWrapper","_ref4","dateTime","dateString","Date","toUTCString","split","component","fontSize","pl","fontFamily","marginBottom","GalleryBucket","_ref5","date","bucketData","_step","_iterator","_createForOfIteratorHelper","s","n","done","value","err","f","anyDisplayed","Grid","item","_fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","mediaState","mediaMap","dateMap","previousLast","limit","url","data","media","hasMoreMedia","_step$value","_value$CreateDate$spl","_value$CreateDate$spl2","wrap","_context","_objectSpread","maxMediaCount","mediaCount","console","error","abrupt","URL","window","location","origin","searchParams","append","toString","includeRaw","fetch","then","res","json","sent","Media","MoreMedia","entries","previous","CreateDate","push","addedCount","length","t0","Error","stop","apply","arguments","mediaReducer","state","action","hash","Thumbnail64","thumb64","scanProgress","progress","Fullres64","fullres64","loading","incBy","scrollTo","behavior","searchContent","search","log","document","documentElement","style","_state$mediaMap$state","_state$mediaMap$state2","_state$mediaMap$state3","current","scrollIntoView","block","_unused","handleScroll","scrollHeight","scrollTop","innerHeight","moreData","_x","_x2","fetchData","NoMediaContainer","flexDirection","marginTop","gap","alignContent","NoMediaDisplay","Button","GalleryOptions","rawSelected","AppBar","color","padding","boxShadow","Toolbar","Tooltip","title","placement","ToggleButton","selected","onChange","backgroundColor","InfoIcon","InfiniteScroll","items","itemCount","moreItems","pb","textAlign","paddingTop","enqueueSnackbar","useSnackbar","_GetWebsocket","GetWebsocket","wsSend","lastMessage","_useReducer","readyState","useReducer","_useReducer2","useEffect","addEventListener","_","msgData","JSON","parse","variant","_i","_Object$values","Object","values","c","_i2","_Object$values2","count","includes","dateGroups","keys","i","HeaderBar","page","LinearProgress","Container","paddingLeft","paddingRight","Presentation","PostFile","file","path","stringify","content","readFile","Promise","resolve","reject","fr","FileReader","onload","name","item64","result","onerror","readAsDataURL","filesData","_step2","_iterator2","size","snacky","WS_URL","host","dcTimeout","setDcTimeout","_useState3","_useState4","dcSnack","setDcSnack","_useWebSocket","useWebSocket","onOpen","clearTimeout","closeSnackbar","onClose","persist","preventDuplicate","reconnectAttempts","reconnectInterval","last","shouldReconnect","onReconnectStop","sendMessage","msg","dispatchSync","recursive","customTheme","createTheme","palette","primary","main","contrastText","typography","fontWeightRegular","Chip","fontWeight","emphasize","shadows","includeHome","navigate","parts","slice","pop","unshift","crumbPaths","index","val","crumbs","part","replace","Breadcrumbs","separator","Search","theme","_defineProperty","shape","alpha","common","white","marginLeft","breakpoints","up","spacing","SearchIconWrapper","StyledInputBase","InputBase","transition","transitions","create","_useCookies","useCookies","_useCookies2","removeCookie","nav","useNavigate","useParams","pt","IconButton","href","edge","FolderIcon","PhotoLibraryIcon","SyncIcon","id","hidden","accept","HandleFileUpload","target","files","UploadIcon","SearchIcon","placeholder","inputProps","LogoutIcon","ThumbnailContainer","StyledLoader","CircularProgress","right","props","_objectWithoutProperties","_excluded","imageLoaded","setImageLoaded","isVisible","isIntersecting","setIntersecting","observer","IntersectionObserver","entry","rootMargin","observe","disconnect","useIsVisible","imgUrl","src","onLoad","BlurHash","Blurhash","PresentationContainer","StyledMediaImage","PresentationVisual","_mediaData$MediaType","FriendlyName","InsertDriveFileIcon","onDragOver","keyDownHandler","event","key","preventDefault","removeEventListener","startKeyDownHandler","CloseIcon","Crumbs"],"sourceRoot":""}