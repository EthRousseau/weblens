#!/bin/bash

set +e

if [[ "$0" == "${BASH_SOURCE[0]}" ]]; then
    echo "ERR setupRemoteTests must be sourced, not executed. Try:"
    echo "source ./scripts/setupRemoteTests"
    exit 1
fi

if [[ ! -e ./scripts ]]; then
    echo "ERR Could not find ./scripts directory, are you at the root of the repo? i.e. ~/repos/weblens and not ~/repos/weblens/scripts"
    return 1
fi

printf "Killing other instances of Weblens... "
pkill weblens &>/dev/null || true
printf "Done\n"

export APP_ROOT=$PWD

mkdir -p ./build/bin
rm -f ./build/bin/weblens

mkdir -p ./build/logs/
mkdir -p ./build/core-test
mkdir -p ./build/backup-test

printf "Dropping old databases... "
mongosh --eval "use weblens-mock-core" --eval "db.dropDatabase()" >/dev/null
printf "Done\n"

printf "\n### Starting Weblens Core ###\n"
if ! ./scripts/startWeblens --trace --config MOCK-CORE -d --log ./build/logs/core-test-target.log; then
    printf "\n### FAILED ###\n"
    return 1
fi
printf "### Core Started ###\n\n"

function wait_for_startup() {
    printf "Waiting up to 10s for Weblens startup... "
    counter=0
    while [ "$(curl -s --location 'http://localhost:8089/api/info' 2>/dev/null | jq '.started')" != "true" ]; do
        sleep 1
        ((counter++))
        if [ "$counter" -ge "10" ]; then
            printf "\n"
            echo "###########################################################################################"
            cat ./build/logs/core-test-target.log
            echo "###################################### ^ Core Logs ^ ######################################"
            echo "ERR Failed to connect to weblens core after 10 seconds, exiting..."
            return 1
        fi
    done
    printf "Connected\n"
}

wait_for_startup

printf "Initializing core server... "
serverResponse=$(curl --location 'http://localhost:8089/api/servers/init' \
    --header 'Content-Type: application/json' \
    --data '{
    "name": "MOCK-CORE",
    "role": "core",
    "username": "ethan",
    "password": "password"
}' 2>/dev/null)

serverId=$(echo "$serverResponse" | jq -r '.id')

if [[ "$serverId" == "" ]]; then
    printf "FAILED\n"
    echo "ERR Failed Initializing server, exiting..."
    echo "$serverResponse"
    return 1
fi
printf "Done\n"

wait_for_startup

printf "Logging in new user... "
loginResponse=$(curl --location 'http://localhost:8089/api/users/auth' \
    --header 'Content-Type: application/json' \
    --data '{
            "username": "ethan",
            "password": "password"
        }' 2>/dev/null)

token=$(jq -r '.token' <<<"$loginResponse")

if [[ "$token" == "" ]] || [[ "$token" == "null" ]]; then
    printf "FAILED\n"
    echo "ERR Failed to login user, exiting..."
    echo "$loginResponse"
    return 1
fi

printf "Done\n"

printf "Generating API Key... "
apiKeyResponse=$(curl --request POST --location 'http://localhost:8089/api/keys' --cookie "weblens-session-token=$token" 2>/dev/null)
apiKey=$(jq -r '.key' <<<"$apiKeyResponse")

if [[ "$apiKey" == "" ]]; then
    printf "FAILED\n"
    echo "ERR Did not get API key from core server, exiting..."
    echo "$apiKeyResponse"
    return 1
fi
printf "Done\n"

export CORE_API_KEY=$apiKey
export MOCK_CORE_ID=$serverId
export CORE_ADDRESS="http://localhost:8089/"

echo "CORE_API_KEY: $CORE_API_KEY"
echo "MOCK_CORE_ID: $MOCK_CORE_ID"

#ENV_FILE=$(pwd)/config/backup-test.env ./build/bin/weblens &
