#!/bin/bash

if [[ ! -e ./ui ]]; then
  echo "ERR Could not find ./ui directory, are you at the root of the repo? i.e. ~/repos/weblens and not ~/repos/weblens/scripts"
  exit 1
fi

mkdir -p build/logs

tail_pid=-1
tail_file=""
do_tail() {
  tail_file="$1"
  if [[ $show_logs == true ]]; then
    printf "\n"
    : >"$1"
    tail -f "$1" &
    tail_pid=$!
  else
    printf " "
  fi
}

stop_tail() {
  if [[ $tail_pid -ne -1 ]]; then
    kill $tail_pid &>/dev/null
    wait $tail_pid 2>/dev/null
    tail_pid=-1
    tail_file=""
  fi
}

failed=false
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color
show_fail() {
  failed=true
  printf "%bFAIL%b\n" "${RED}" "${NC}"
  if [[ $show_logs != true ]]; then
    cat "$tail_file"
    printf "%bFAIL%b\n" "${RED}" "${NC}"
  fi
  stop_tail
}
show_pass() {
  stop_tail
  printf "%bPASS%b\n" "${GREEN}" "${NC}"
}

trap 'kill $tail_pid &>/dev/null' EXIT

usage="
Usage: $0 [OPTIONS]

This script consolidates and handles various Weblens tests. 

Options:
  --backend               
      Enable basic backend tests

  -r, --remote-tests      
      Enable remote (end-to-end) tests for the backend 
      (sets --backend)

  --ui                    
      Enable UI tests

  --coverage              
      Generate and display go test coverage report

  -a, --all               
      Run both backend (includes remote) and UI tests 
      (sets --remote-tests and --ui)

  -l, --show-logs         
      Display logs during the test run (logs are also saved to ./build/logs and are printed on test failure reglardless of this flag)
"

backend_tests=false
remote_tests=false
show_logs=false
ui_tests=false
coverage=false

while [ "${1:-}" != "" ]; do
  case "$1" in
  "-a" | "--all")
    backend_tests=true
    remote_tests=true
    ui_tests=true
    ;;
  "--backend")
    backend_tests=true
    ;;
  "-r" | "--remote-tests")
    backend_tests=true
    remote_tests=true
    ;;
  "--target")
    shift
    target=$1
    ;;
  "-l" | "--show-logs")
    show_logs=true
    ;;
  "--coverage")
    coverage=true
    ;;
  "--ui")
    ui_tests=true
    ;;
  "-h" | "--help")
    echo "$usage"
    exit 0
    ;;
  *)
    "Unknown argument: $1"
    echo "$usage"
    exit 1
    ;;
  esac
  shift
done

if [[ $REMOTE_TESTS == true ]]; then
  remote_tests=true
  backend_tests=true
fi

if [[ $ui_tests != true ]] && [[ $backend_tests != true ]]; then
  echo "No tests selected..."
  echo "$usage"
  exit 1
fi

if [[ ! -e ./ui/dist/index.html ]] || [[ ! -d ./ui/node_modules ]]; then
  cd ui || exit
  export VITE_APP_BUILD_TAG=test
  export VITE_BUILD=true
  npm install
  npm run build
  cd .. || exit
fi

if [[ $ui_tests == true ]]; then
  printf "Running UI linter ..."
  cd ui || exit
  do_tail ../build/logs/ui-lint.log
  if ! npx eslint . &>../build/logs/ui-lint.log; then
    show_fail
  else
    show_pass
  fi
  cd .. || exit
fi

if [[ $remote_tests == true ]]; then
  export REMOTE_TESTS=true
  printf "Setting up remote tests ..."
  do_tail ./build/logs/remote-setup.log
  if ! source ./scripts/setupRemoteTests &>./build/logs/remote-setup.log; then
    show_fail
    printf "%bERR Failed to setup remote target, not running tests%b\n" "${RED}" "${NC}"
    exit 1
  fi
  stop_tail
  echo "Done"
fi

if [[ $backend_tests == true ]]; then
  if [[ -z "$target" ]]; then
    target="./..."
  else
    echo "Using target: $target"
  fi
  printf "Running backend tests ..."
  do_tail ./build/logs/backend-test.log
  if ! (
    set -o pipefail
    APP_ROOT=$PWD CONFIG_PATH=$PWD/config CONFIG_NAME=TEST go test -coverprofile ./build/logs/cover_raw.out -v "$target" &>./build/logs/backend-test.log
  ); then
    show_fail
  else
    if [[ $coverage == true ]]; then
      grep -v -e internal -e models -e http -e mock ./build/logs/cover_raw.out >./build/logs/cover.out
      rm ./build/logs/cover_raw.out
    fi
    show_pass
  fi
fi

weblens_pid=$(cat ./build/logs/weblens.pid 2>/dev/null)

if [[ $remote_tests == true ]] && [[ -n $weblens_pid ]]; then
  echo "Killing test weblens instance (PID: $weblens_pid)"
  kill "$weblens_pid"
fi

if [[ $failed == true ]]; then
  exit 1
fi

if [[ $coverage == true ]]; then
  go tool cover -html=./build/logs/cover.out
fi
